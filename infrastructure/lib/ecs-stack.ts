import { Construct } from 'constructs';
import * as cdk from 'aws-cdk-lib';
import * as ecs from "aws-cdk-lib/aws-ecs";
import * as ecs_patterns from "aws-cdk-lib/aws-ecs-patterns";
import * as ec2 from 'aws-cdk-lib/aws-ec2'
import * as lambda from 'aws-cdk-lib/aws-lambda';
import * as apigateway from 'aws-cdk-lib/aws-apigateway'
import { Role } from 'aws-cdk-lib/aws-iam';
import * as iam from 'aws-cdk-lib/aws-iam';

// ðŸ‘‡ extend the props interface of ECSStack
interface EcsStackProps extends cdk.StackProps {
  vpc: ec2.Vpc;
}


export class Cluster extends cdk.Stack {
  constructor(scope: Construct, id: string, props: EcsStackProps) {
    super(scope, id, props);

    // Uses the stuff from bin/demo-app.ts
    const {vpc} = props;


    const cluster = new ecs.Cluster(this, "MyCluster", {
      // vpc is the const above
      vpc: vpc
    });

    new ecs_patterns.ApplicationLoadBalancedFargateService(this, "MyFargateService", {
      cluster: cluster, // Required
      cpu: 256, // Default is 256
      desiredCount: 1, // Default is 1
      taskImageOptions: { image: ecs.ContainerImage.fromRegistry("amazon/amazon-ecs-sample") },
      memoryLimitMiB: 512, // Default is 512
      publicLoadBalancer: true // Default is true
    });

    // Lambda functions
    // Role that can restart ECS

    // https://docs.aws.amazon.com/cdk/api/v1/docs/aws-lambda-readme.html
    const webhookReload = new lambda.Function(this, 'WebhookReload', {
      runtime: lambda.Runtime.RUBY_2_7,
      // handler needs to be filename then method to call
      // filename.method_to_call
      handler: 'webhook.lambda_handler',
      code: lambda.Code.fromAsset('lambda/webhook'),
      timeout: cdk.Duration.seconds(500)
    });

    dopplerReload.addToRolePolicy(
      new iam.PolicyStatement({
        actions: ['ecs:*'],
        effect: iam.Effect.ALLOW,
        resources: [ '*' ]
      })
    );
    // API Gateway
    const api = new apigateway.RestApi(this, "RestAPI", {
      deployOptions: {
        dataTraceEnabled: true,
        tracingEnabled: true
      },
    });
    // Endpoint is what you put after the URL generated by AWS
    // IE https://ov9xo65323.execute-api.us-east-1.amazonaws.com/prod/restart
    const endpoint = api.root.addResource("restart")
    const endpointMethod = endpoint.addMethod("POST", new apigateway.LambdaIntegration(dopplerReload))



  }
}
